# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PubGO_Marter_GeotecnologiaDockWidget
                                 A QGIS plugin
 Tarea-1
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-13
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Lucas
        email                : lucascarvalho@usal.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
from geopy.geocoders import Nominatim
from qgis.core import QgsProject, QgsVectorLayer, QgsFeature, QgsField, QgsGeometry, QgsPointXY
from geopy.distance import geodesic
from PyQt5.QtCore import QVariant
from PyQt5 import QtCore

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Tarea_1_dockwidget_base.ui'))

geolocator = Nominatim(user_agent="my_geocoder")


class PubGO_Marter_GeotecnologiaDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(PubGO_Marter_GeotecnologiaDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.selector_capa.setFilter("Archivos csv(*.csv)")
        self.cargar_btn.clicked.connect(self.cargar_datos)
        self.limpiar_btn.clicked.connect(self.limpiar_tabla)
        self.limpiar_btn1.clicked.connect(self.limpiar_tabla1)
        self.limpiar_btn2.clicked.connect(self.limpiar_tabla2)
        self.estimar_btn.clicked.connect(self.user_datos)
        self.estimar_dis_btn.clicked.connect(self.distancia)
        self.latitude = None
        self.longitude = None
        self.crear_shp_btn.clicked.connect(self.crear_capa)

    def cargar_datos(self, event):
        ruta = str(self.selector_capa.filePath())
        with open(ruta, 'r') as leer_csv:  # abro el archivo para leer
            lineas = leer_csv.read().splitlines()  # Separo por lineas
            contar = 0
            for linea in lineas:
              if contar > 0:
                campos = linea.split(';')
                self.qtw_tabla.insertRow(self.qtw_tabla.rowCount())
                self.qtw_tabla.setItem(self.qtw_tabla.rowCount() - 1, 0, QtWidgets.QTableWidgetItem((campos[0])))
                self.qtw_tabla.setItem(self.qtw_tabla.rowCount() - 1, 1, QtWidgets.QTableWidgetItem((campos[3])))
                self.qtw_tabla.setItem(self.qtw_tabla.rowCount() - 1, 2, QtWidgets.QTableWidgetItem((campos[4])))
                self.qtw_tabla.setItem(self.qtw_tabla.rowCount() - 1, 3, QtWidgets.QTableWidgetItem((campos[1])))
                self.qtw_tabla.setItem(self.qtw_tabla.rowCount() - 1, 4, QtWidgets.QTableWidgetItem((campos[5])))
              contar = contar + 1

    def user_datos(self, event):
        postcode = self.postcode_lineEdit.text()
        leaving = self.leaving_lineEdit.text()
        latitude, longitude = self.postcode_to_lat_long(postcode, geolocator)
        if latitude is None or longitude is None:
            QtWidgets.QMessageBox.warning(self, "PostCode no exite", "Post Code entrado no existe en UK")
        else:
            row_count = self.qtw_tabla2.rowCount()
            self.qtw_tabla2.insertRow(row_count)
            self.qtw_tabla2.setItem(self.qtw_tabla2.rowCount() - 1, 0, QtWidgets.QTableWidgetItem(postcode))
            self.qtw_tabla2.setItem(self.qtw_tabla2.rowCount() - 1, 1, QtWidgets.QTableWidgetItem(str(latitude)))
            self.qtw_tabla2.setItem(self.qtw_tabla2.rowCount() - 1, 2, QtWidgets.QTableWidgetItem(str(longitude)))
            self.qtw_tabla2.setItem(self.qtw_tabla2.rowCount() - 1, 3, QtWidgets.QTableWidgetItem(leaving))

    def distancia(self, event):
        # Clear the table 3 before calculating distances
        self.qtw_tabla3.clearContents()
        self.qtw_tabla3.setRowCount(0)
        velocity_coefficient = self.comboBox.currentText()

        # Retrieve the postcode and coordinates from table 2
        postcode = self.postcode_lineEdit.text()
        latitude, longitude = self.postcode_to_lat_long(postcode, geolocator)
        if latitude is None or longitude is None:
            QtWidgets.QMessageBox.warning(self, "PostCode no exite", "Post Code entrado no existe en UK")
            return

        # Iterate through the points in table 1 and calculate distances
        row_count = self.qtw_tabla.rowCount()
        for row in range(row_count):
            table_latitude = float(self.qtw_tabla.item(row, 1).text())
            table_longitude = float(self.qtw_tabla.item(row, 2).text())
            distance = geodesic((latitude, longitude), (table_latitude, table_longitude)).kilometers

            # Retrieve the leaving and opening times from table 2 and table 1 respectively
            leaving_time = self.qtw_tabla2.item(0, 3).text()  # Assuming only one row in table 2
            opening_time = self.qtw_tabla.item(row, 3).text()
            # Calculate the time using the formula t = d / v
            velocity = self.get_velocity_from_coefficient(velocity_coefficient)
            Tiempo = distance / velocity
            Yes = "OPEN"
            if leaving_time < opening_time:
                # Add the distance and other information to table 3
                self.qtw_tabla3.insertRow(self.qtw_tabla3.rowCount())
                self.qtw_tabla3.setItem(self.qtw_tabla3.rowCount() - 1, 0, QtWidgets.QTableWidgetItem(self.qtw_tabla.item(row, 0).text()))
                self.qtw_tabla3.setItem(self.qtw_tabla3.rowCount() - 1, 1, QtWidgets.QTableWidgetItem(str(distance)))
                self.qtw_tabla3.setItem(self.qtw_tabla3.rowCount() - 1, 2, QtWidgets.QTableWidgetItem(str(Yes)))
                self.qtw_tabla3.setItem(self.qtw_tabla3.rowCount() - 1, 3, QtWidgets.QTableWidgetItem(str(Tiempo)))
                self.qtw_tabla3.setItem(self.qtw_tabla3.rowCount() - 1, 4, QtWidgets.QTableWidgetItem(str(table_latitude)))
                self.qtw_tabla3.setItem(self.qtw_tabla3.rowCount() - 1, 5, QtWidgets.QTableWidgetItem(str(table_longitude)))

        self.sort_table()

    def sort_table(self):
        column_index = 3
        self.qtw_tabla3.sortItems(column_index, QtCore.Qt.AscendingOrder)

    def postcode_to_lat_long(self, postcode, geolocator):
        location = geolocator.geocode(postcode + ", UK")
        if location is None:
            return None, None
        else:
            return location.latitude, location.longitude


    def get_velocity_from_coefficient(self, coefficient):
        if coefficient == "Publico":
            return 30.0
        elif coefficient == "Caminando":
            return 5.0
        elif coefficient == "Coche":
            return 19.0
        else:
            return None

    def crear_capa(self, event):
        vlayer1 = QgsVectorLayer('Point?crs=EPSG:4326', 'OPEN PUBS FOR YOU NOW', 'memory')
        provider1 = vlayer1.dataProvider()
        provider1.addAttributes([QgsField('Nombre', QVariant.String), QgsField('Timepo de Viaje', QVariant.String)])
        vlayer1.updateFields()

        for row in range(self.qtw_tabla3.rowCount()):
            f = QgsFeature()
            f.setGeometry(QgsGeometry.fromPointXY(
                QgsPointXY(float(self.qtw_tabla3.item(row, 5).text()), float(self.qtw_tabla3.item(row, 4).text()))))
            f.setAttributes([self.qtw_tabla3.item(row, 0).text(), self.qtw_tabla3.item(row, 3).text()])
            provider1.addFeature(f)

        vlayer1.updateExtents()
        QgsProject.instance().addMapLayer(vlayer1)

        vlayer2 = QgsVectorLayer('Point?crs=EPSG:4326', 'YOU', 'memory')
        provider2 = vlayer2.dataProvider()
        provider2.addAttributes([QgsField('Attribute1', QVariant.String)])
        vlayer2.updateFields()

        for row in range(self.qtw_tabla2.rowCount()):
            g = QgsFeature()
            g.setGeometry(QgsGeometry.fromPointXY(
                QgsPointXY(float(self.qtw_tabla2.item(row, 2).text()), float(self.qtw_tabla2.item(row, 1).text()))))
            g.setAttributes([self.qtw_tabla2.item(row, 0).text()])
            provider2.addFeature(g)

        vlayer2.updateExtents()
        QgsProject.instance().addMapLayer(vlayer2)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def limpiar_tabla(self):
        self.qtw_tabla.clearContents()
        self.qtw_tabla.setRowCount(0)

    def limpiar_tabla1(self):
        self.qtw_tabla2.clearContents()
        self.qtw_tabla2.setRowCount(0)

    def limpiar_tabla2(self):
        self.qtw_tabla3.clearContents()
        self.qtw_tabla3.setRowCount(0)
